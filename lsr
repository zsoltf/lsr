#!/usr/bin/env ruby
# coding: utf-8

require 'date'
require 'ostruct'

class Ls

  def initialize(args=".", colors=nil)

    @colors = OpenStruct.new(colors)

    print(args)

  end

  def fuzzy_time(time)

    if time[-1].split(":").count == 2
      new_time = "#{time[0]} #{time[1]} #{time[2]} #{Time.now.zone}"
    else
      new_time = "#{time[2]} #{time[0]} #{time[1]} #{Time.now.zone}"
    end

    time = DateTime.parse(new_time).to_time
    s = (Time.new - time).round
    m = s / 60
    h = m / 60
    d = h / 24
    w = d / 7
    mon = d / 30
    y = mon / 12

    if y > 0
      "#{@colors.gray1}#{y} yr#{(y > 1) ? "s":""}#{@colors.gray}"
    elsif mon > 0
      "#{@colors.gray2}#{mon} mon#{(mon > 1) ? "s":""}#{@colors.gray}"
    elsif w > 0
      "#{@colors.gray3}#{w} week#{(w > 1) ? "s":""}#{@colors.gray}"
    elsif d > 0
      "#{@colors.gray4}#{d} day#{(d > 1) ? "s":""}#{@colors.gray}"
    elsif h > 0
      "#{@colors.gray5}#{h} hr#{(h > 1) ? "s":""}#{@colors.gray}"
    elsif m > 0
      "#{@colors.gray6}#{m} min#{(m > 1) ? "s":""}#{@colors.gray}"
    else
      "#{@colors.gray7}#{s} s#{@colors.gray}"
    end

  end

  def nice_permissions(perm)
    perm = perm.gsub "-", " "
    kind = perm.slice 0
    u_r = perm.slice 1
    u_w = perm.slice 2
    u_x = perm.slice 3
    g_r = perm.slice 4
    g_w = perm.slice 5
    g_x = perm.slice 6
    o_r = perm.slice 7
    o_w = perm.slice 8
    o_x = perm.slice 9
    kind = case kind
           when "d"
             "#{@colors.blue}d#{@colors.gray}"
           when "l"
             "#{@colors.yellow}l#{@colors.gray}"
           when"s"
             "#{@colors.pink}s#{@colors.gray}"
           else
             "f"
           end
    user = "#{@colors.green}#{u_r}#{@colors.purple}#{u_w}#{@colors.orange}#{u_x}#{@colors.gray}"
    group = "#{@colors.green}#{g_r}#{@colors.purple}#{g_w}#{@colors.orange}#{g_x}#{@colors.gray}"
    other = "#{@colors.green}#{o_r}#{@colors.purple}#{o_w}#{@colors.orange}#{o_x}#{@colors.gray}"
    "│#{kind}│#{user}│#{group}│#{other}│"
  end

  def colored_size(size)
    s = size.split("K").first.split("M").first.to_i

    if size.end_with?("K")
      case s
      when 1..3
        "#{@colors.blue1}#{size}#{@colors.gray}"
      when 4
        "#{@colors.blue}  ∙ #{@colors.gray}"
      when 5..99
        "#{@colors.blue1}#{size}#{@colors.gray}"
      when 100..499
        "#{@colors.blue2}#{size}#{@colors.gray}"
      when 500..1000
        "#{@colors.blue3}#{size}#{@colors.gray}"
      else
        "#{@colors.blue4}#{size}#{@colors.gray}"
      end
    elsif size.end_with?("M")
      case s
      when 1..99
        "#{@colors.green1}#{size}#{@colors.gray}"
      when 100..499
        "#{@colors.green2}#{size}#{@colors.gray}"
      else
        "#{@colors.green3}#{size}#{@colors.gray}"
      end
    else
      "#{@colors.gray}#{size}#{@colors.gray}"
    end

  end

  def print(args)
    link_chr = "→"

    long_list = args.match(/-*l/)
    no_perm = args.slice!(/-*P/)
    ls_out = `ls --color=always --group-directories-first -hCG #{args}`

    if long_list && no_perm
      a = []
      ls_out.each_line { |l| a << l.split(" ") }
      a.each do |l|
        if l.count == 8
          # time - size - name
          puts "#{@colors.gray}#{fuzzy_time(l[4..6])}	│ #{colored_size(l[3])}	│ #{l[7]}"
        elsif l.count == 10
          # time - size - name - link_chr - link
          puts "#{@colors.gray}#{fuzzy_time(l[4..6])}	│ #{l[3]}	│ #{l[7]} #{link_chr} #{l[9]}"
        end
      end
    elsif long_list
      a = []
      ls_out.each_line { |l| a << l.split(" ") }
      a.each do |l|
        if l.count == 8
          # perm - time - size - name
          puts "#{@colors.gray}#{nice_permissions(l[0])}	#{fuzzy_time(l[4..6])}	│ #{colored_size(l[3])}	│ #{l[7]}"
        elsif l.count == 10
          # perm - time - size - name - link_chr - link
          puts "#{@colors.gray}#{nice_permissions(l[0])}	#{fuzzy_time(l[4..6])}	│ #{l[3]}	│ #{l[7]} #{link_chr} #{l[9]}"
        end
      end
    else
      puts ls_out
    end
    puts "\e[0m"
  end

end

colors = {
  blue: "\e[38;5;110m",
  green: "\e[38;5;29m",
  purple: "\e[38;5;60m",
  pink: "\e[38;5;197m",
  orange: "\e[38;5;208m",
  gray: "\e[38;5;241m",
  gray1: "\e[38;5;238m",
  gray2: "\e[38;5;242m",
  gray3: "\e[38;5;244m",
  gray4: "\e[38;5;246m",
  gray5: "\e[38;5;248m",
  gray6: "\e[38;5;250m",
  gray7: "\e[38;5;254m",
  green1: "\e[38;5;29m",
  green2: "\e[38;5;107m",
  green3: "\e[38;5;108m",
  blue1: "\e[38;5;60m",
  blue2: "\e[38;5;67m",
  blue3: "\e[38;5;110m",
  blue4: "\e[38;5;81m",
}

l = Ls.new(ARGV.join(" "), colors)
